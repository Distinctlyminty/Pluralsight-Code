AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create a Wordpress installation on the LAMP stack using an EC2 instance
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  Mappings:
   AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
    us-west-2:
      HVM64: ami-01e24be29428c15b2
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
    eu-west-1:
      HVM64: ami-08935252a36e25f85
    eu-west-2:
      HVM64: ami-01419b804382064e4
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
    eu-north-1:
      HVM64: ami-86fe70f8
    ap-northeast-1:
      HVM64: ami-00a5245b4816c38e6
    ap-northeast-2:
      HVM64: ami-00dc207f8ba6dc919
    ap-northeast-3:
      HVM64: ami-0b65f69a5c11f3522
    ap-southeast-1:
      HVM64: ami-05b3bcf7f311194b3
    ap-southeast-2:
      HVM64: ami-02fd0b06f06d93dfc
    ap-south-1:
      HVM64: ami-0ad42f4f66f6c1cc9
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    ca-central-1:
      HVM64: ami-07423fb63ea0a0930
    sa-east-1:
      HVM64: ami-05145e0b28ad8e0b2
    cn-north-1:
      HVM64: ami-053617c9d818c1189
    cn-northwest-1:
      HVM64: ami-0f7937761741dc640
  Resources:
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80  + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  WebServer:
    Type: 'AWS::EC2::Instance'
    Properties:
         ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
        InstanceType: !Ref InstanceType
        SecurityGroups: !Ref WebServerSecurityGroup
        KeyName: !Ref KeyName
    Metadata:
      Instance:
        Description: "This server hosts the WiredBrain Coffee Blog"
  IPAddress:
    Type: 'AWS::EC2::EIP'
  IPAssoc:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref WebServer
      EIP: !Ref IPAddress

Outputs:
    WebsiteURL:
     Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServer
          - PublicDnsName
        - /wordpress
      Description: WordPress Website
   